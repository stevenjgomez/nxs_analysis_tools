from _typeshed import Incomplete

__all__ = ['load_data', 'load_transform', 'plot_slice', 'Scissors', 'reciprocal_lattice_params', 'rotate_data', 'rotate_data_2D', 'convert_to_inverse_angstroms', 'array_to_nxdata', 'Padder', 'rebin_nxdata', 'rebin_3d', 'rebin_1d']

def load_data(path, print_tree: bool = True): ...
def load_transform(path, print_tree: bool = True): ...
def array_to_nxdata(array, data_template, signal_name: Incomplete | None = None): ...
def rebin_3d(array): ...
def rebin_1d(array): ...
def rebin_nxdata(data): ...
def plot_slice(data, X: Incomplete | None = None, Y: Incomplete | None = None, sum_axis: Incomplete | None = None, transpose: bool = False, vmin: Incomplete | None = None, vmax: Incomplete | None = None, skew_angle: int = 90, ax: Incomplete | None = None, xlim: Incomplete | None = None, ylim: Incomplete | None = None, xticks: Incomplete | None = None, yticks: Incomplete | None = None, cbar: bool = True, logscale: bool = False, symlogscale: bool = False, cmap: str = 'viridis', linthresh: int = 1, title: Incomplete | None = None, mdheading: Incomplete | None = None, cbartitle: Incomplete | None = None, **kwargs): ...

class Scissors:
    data: Incomplete
    center: Incomplete
    window: Incomplete
    axis: Incomplete
    integration_volume: Incomplete
    integrated_axes: Incomplete
    linecut: Incomplete
    integration_window: Incomplete
    def __init__(self, data: Incomplete | None = None, center: Incomplete | None = None, window: Incomplete | None = None, axis: Incomplete | None = None) -> None: ...
    def set_data(self, data) -> None: ...
    def get_data(self): ...
    def set_center(self, center) -> None: ...
    def set_window(self, window, axis: Incomplete | None = None, verbose: bool = False) -> None: ...
    def get_window(self): ...
    def cut_data(self, center: Incomplete | None = None, window: Incomplete | None = None, axis: Incomplete | None = None, verbose: bool = False): ...
    def highlight_integration_window(self, data: Incomplete | None = None, width: Incomplete | None = None, height: Incomplete | None = None, label: Incomplete | None = None, highlight_color: str = 'red', **kwargs): ...
    def plot_integration_window(self, **kwargs): ...

def reciprocal_lattice_params(lattice_params): ...
def convert_to_inverse_angstroms(data, lattice_params): ...
def rotate_data(data, lattice_angle, rotation_angle, rotation_axis, printout: bool = False): ...
def rotate_data_2D(data, lattice_angle, rotation_angle): ...

class Padder:
    maxes: Incomplete
    steps: Incomplete
    data: Incomplete
    padded: Incomplete
    padding: Incomplete
    def __init__(self, data: Incomplete | None = None) -> None: ...
    def set_data(self, data) -> None: ...
    def pad(self, padding): ...
    def save(self, fout_name: Incomplete | None = None) -> None: ...
    def unpad(self, data): ...
