from _typeshed import Incomplete

def load_data(path, print_tree: bool = ...): ...
def load_transform(path, print_tree: bool = ...): ...
def array_to_nxdata(array, data_template, signal_name: Incomplete | None = ...): ...
def rebin_3d(array): ...
def rebin_1d(array): ...
def rebin_nxdata(data): ...
def plot_slice(data, X: Incomplete | None = ..., Y: Incomplete | None = ..., sum_axis: Incomplete | None = ..., transpose: bool = ..., vmin: Incomplete | None = ..., vmax: Incomplete | None = ..., skew_angle: int = ..., ax: Incomplete | None = ..., xlim: Incomplete | None = ..., ylim: Incomplete | None = ..., xticks: Incomplete | None = ..., yticks: Incomplete | None = ..., cbar: bool = ..., logscale: bool = ..., symlogscale: bool = ..., cmap: str = ..., linthresh: int = ..., title: Incomplete | None = ..., mdheading: Incomplete | None = ..., cbartitle: Incomplete | None = ..., **kwargs): ...

class Scissors:
    data: Incomplete
    center: Incomplete
    window: Incomplete
    axis: Incomplete
    integration_volume: Incomplete
    integrated_axes: Incomplete
    linecut: Incomplete
    integration_window: Incomplete
    def __init__(self, data: Incomplete | None = ..., center: Incomplete | None = ..., window: Incomplete | None = ..., axis: Incomplete | None = ...) -> None: ...
    def set_data(self, data) -> None: ...
    def get_data(self): ...
    def set_center(self, center) -> None: ...
    def set_window(self, window, axis: Incomplete | None = ..., verbose: bool = ...) -> None: ...
    def get_window(self): ...
    def cut_data(self, center: Incomplete | None = ..., window: Incomplete | None = ..., axis: Incomplete | None = ..., verbose: bool = ...): ...
    def highlight_integration_window(self, data: Incomplete | None = ..., width: Incomplete | None = ..., height: Incomplete | None = ..., label: Incomplete | None = ..., highlight_color: str = ..., **kwargs): ...
    def plot_integration_window(self, **kwargs): ...

def reciprocal_lattice_params(lattice_params): ...
def convert_to_inverse_angstroms(data, lattice_params): ...
def rotate_data(data, lattice_angle, rotation_angle, rotation_axis, printout: bool = ...): ...
def rotate_data_2D(data, lattice_angle, rotation_angle): ...

class Padder:
    maxes: Incomplete
    steps: Incomplete
    data: Incomplete
    padded: Incomplete
    padding: Incomplete
    def __init__(self, data: Incomplete | None = ...) -> None: ...
    def set_data(self, data) -> None: ...
    def pad(self, padding): ...
    def save(self, fout_name: Incomplete | None = ...) -> None: ...
    def unpad(self, data): ...
