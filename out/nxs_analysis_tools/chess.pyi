from _typeshed import Incomplete
from nxs_analysis_tools import Scissors as Scissors, load_data as load_data
from nxs_analysis_tools.datareduction import load_transform as load_transform, reciprocal_lattice_params as reciprocal_lattice_params
from nxs_analysis_tools.fitting import LinecutModel as LinecutModel

class TempDependence:
    sample_directory: Incomplete
    xlabel: str
    datasets: Incomplete
    temperatures: Incomplete
    scissors: Incomplete
    linecuts: Incomplete
    linecutmodels: Incomplete
    def __init__(self, sample_directory: Incomplete | None = None) -> None: ...
    def set_temperatures(self, temperatures) -> None: ...
    def find_temperatures(self) -> None: ...
    def set_sample_directory(self, path) -> None: ...
    def initialize(self) -> None: ...
    def set_data(self, temperature, data) -> None: ...
    def load_transforms(self, temperatures_list: Incomplete | None = None, exclude_temperatures: Incomplete | None = None, print_tree: bool = True, use_nxlink: bool = False) -> None: ...
    def load_datasets(self, file_ending: str = 'hkli.nxs', temperatures_list: Incomplete | None = None, exclude_temperatures: Incomplete | None = None, print_tree: bool = True) -> None: ...
    def get_sample_directory(self): ...
    def clear_datasets(self) -> None: ...
    def set_lattice_params(self, lattice_params) -> None: ...
    def set_window(self, window, verbose: bool = False) -> None: ...
    def set_center(self, center) -> None: ...
    def cut_data(self, center: Incomplete | None = None, window: Incomplete | None = None, axis: Incomplete | None = None, verbose: bool = False): ...
    def plot_linecuts(self, vertical_offset: int = 0, **kwargs): ...
    def plot_linecuts_heatmap(self, ax: Incomplete | None = None, **kwargs): ...
    def highlight_integration_window(self, temperature: Incomplete | None = None, **kwargs): ...
    def plot_integration_window(self, temperature: Incomplete | None = None, **kwargs): ...
    def set_model_components(self, model_components) -> None: ...
    def set_param_hint(self, *args, **kwargs) -> None: ...
    def params_set(self, name, **kwargs) -> None: ...
    def make_params(self) -> None: ...
    def guess(self) -> None: ...
    def print_initial_params(self) -> None: ...
    def plot_initial_guess(self) -> None: ...
    def fit(self, verbose: bool = False) -> None: ...
    def plot_fit(self, mdheadings: bool = False, **kwargs) -> None: ...
    def overlay_fits(self, numpoints: Incomplete | None = None, vertical_offset: int = 0, cmap: str = 'viridis', ax: Incomplete | None = None, data_kwargs: Incomplete | None = None, fit_kwargs: Incomplete | None = None) -> None: ...
    def fit_peak_simple(self) -> None: ...
    def plot_order_parameter(self, param_name: str = 'peakheight', ax: Incomplete | None = None, **kwargs): ...
    def print_fit_report(self) -> None: ...
